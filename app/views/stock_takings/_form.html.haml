- content_for :javascript do
  :javascript
    $(function() {
      $('#new_stock_article').removeAttr('disabled').select2({
        placeholder: '#{t '.create_stock_article', default: 'Create stock article'}',
        data: #{articles_for_select2(Article.undeleted.not_in_stock).to_json},
        createSearchChoice: function(term) {
          return {
            id: 'new',
            text: term
          };
        },
        formatResult: function(result, container, query, escapeMarkup) {
          if(result.id == 'new') {
            return result.text + ' (#{t '.create_from_blank'})';
          }
          var markup=[];
          Select2.util.markMatch(result.text, query.term, markup, escapeMarkup);
          return markup.join("");
        }
      }).on('change', function(e) {
        var selectedArticle = $(e.currentTarget).select2('data');
        if(!selectedArticle) {
          return false;
        }
        if('new' == selectedArticle.id) {
          $.ajax({
            url: '#{new_stock_article_path}',
            type: 'get',
            data: {stock_article: {name: selectedArticle.text}},
            contentType: 'application/json; charset=UTF-8'
          });
          $('#new_stock_article').select2('data', null);
          return true;
        }
        if('' != selectedArticle.id) {
          $.ajax({
            url: '#{derive_stock_articles_path}',
            type: 'get',
            data: {old_article_id: selectedArticle.id},
            contentType: 'application/json; charset=UTF-8'
          });
          $('#new_stock_article').select2('data', null);
          return true;
        }
      });
      
      // Subscribe to database changes.
      // See publish/subscribe design pattern in /doc.
      $(document).on('StockArticle#create', function(e) {
        $.ajax({
          url: '#{form_on_stock_article_create_stock_takings_path}',
          type: 'get',
          data: {id: e.stock_article_id},
          contentType: 'application/json; charset=UTF-8'
        });
      });
      
      $(document).on('StockArticle#update', function(e) {
        $.ajax({
          url: '#{form_on_stock_article_update_stock_takings_path}',
          type: 'get',
          data: {id: e.stock_article_id},
          contentType: 'application/json; charset=UTF-8'
        });
      });
      
      $('#associated_stock_takings').on('keyup change', function(e) {
        $.ajax({
          url: '#{mark_associated_stock_changes_stock_takings_path}',
          type: 'get',
          data: {stock_taking_id: '#{@stock_taking.id}', associated_stock_taking_id: $(this).val()},
          contentType: 'application/json; charset=UTF-8'
        });
      });
      
      $('#stock_changes tbody').on('keyup change', 'input.quantity-input', update_stock_article_stock_change_count);
      
      $('#associated_stock_takings').trigger('change');
      
    });
    
    function update_stock_article_stock_change_count(e) {
      // update only one table row if event is given
      var context = ('undefined' === typeof(e))
        ? $('#stock_changes tbody tr')
        : $(e.currentTarget).closest('tr');
      
      context.each(function() {
        var is_filled = $('.quantity-input', this).val() != '';
        var count = is_filled + $(this).data('associated-count');
        var old_count = $(this).data('count');
        $(this).data('count', count);
        
        $('.stock_change_status', this)
          .text(count)
          .toggleClass('label-success', count > 0);
      });
    }

= simple_form_for(@stock_taking) do |f|
  = f.error_notification
  = base_errors f.object
  
  %h2= t '.title_1_select_associated_stock_takings'
  %select{id: 'associated_stock_takings', data: {base_id: @stock_taking.id.to_s}}
    %optgroup{label: t('.default_selection', default: '-')}
      %option{value: '', selected: :selected}= t '.no_thanks'
    %optgroup{label: t('.first_associated_stock_taking', default: '-')}
      - for referenced_stock_taking in StockTaking.reorder('id DESC').limit(50)
        %option{value: referenced_stock_taking.id, title: referenced_stock_taking.note}
          #{l referenced_stock_taking.created_at, format: :short}
          |
          #{truncate referenced_stock_taking.note, length: 10}
    %optgroup{label: t('.older_entries_hidden', default: 'â€¦')}
    
  %h2= t '.title_2_set_new_quantities'
  %table#stock_changes.table.table-hover.stupidtable
    %thead
      %tr
        %th{:data => {:sort => 'int'}}
          %i.icon.icon-ok
        %th.default-sort{:data => {:sort => 'string'}}= StockArticle.model_name.human
        %th= heading_helper StockArticle, :price
        %th= heading_helper StockArticle, :unit
        %th= heading_helper StockArticle, :article_category
        %th= heading_helper StockChange, :old_quantity_available
        %th= heading_helper StockChange, :new_quantity_available
        %th= t 'ui.actions'
    %tfoot
      %tr
        %th{:colspan => 5}
          - if Article.undeleted.empty?
            = link_to t('.create_stock_article'), new_stock_article_path, :remote => true, :class => 'btn'
          - else
            %input#new_stock_article{:style => 'width: 500px;'}
    %tbody
      = f.simple_fields_for :stock_changes do |stock_change_form|
        = render :partial => 'stock_change_fields', :locals => {:f => stock_change_form}
  
  %h2= t '.title_3_finish_stock_taking'
  = f.input :date, as: :date_picker
  = f.input :note, :input_html => {:size => "35x4", :value => "#{show_user @current_user, unique: true}: ..."}
  .form-actions
    = f.submit class: 'btn btn-primary'
    = link_to t('ui.or_cancel'), stock_takings_path
